/*
 * generated by Xtext unknown
 */
package org.xtext.example.mydsl.generator

import java.io.IOException
import java.util.Collections
import java.util.ArrayList

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.papyrusrt.xtumlrt.umlrt.RTModel
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl
// import org.eclipse.papyrusrt.codegen.UMLRTCodeGenerator
// import org.eclipse.papyrusrt.codegen.config.CodeGenProvider

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	//static UMLRTCodeGenerator generator = CodeGenProvider.getDefault().get();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val fileName = URI.decode(resource.URI.trimFileExtension.lastSegment);
		val xmiResource = new XMIResourceImpl(URI.createFileURI(fileName+".uml")); 
		xmiResource.getContents().add(resource.allContents.filter(RTModel).next());

        try {
            xmiResource.save(Collections.EMPTY_MAP);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	
	/*
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val rtModel = resource.allContents.filter(RTModel).next();
		val topCapsuleName = "Top";
		val targets = new ArrayList<EObject>();
		targets.add(rtModel);
		
		generator.generate(targets, topCapsuleName, false);
		
	}*/
}
